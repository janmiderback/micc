/*
* Copyright (c) 2007, Jan Miderbäck
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*   1. Redistributions of source code must retain the above copyright notice,
*      this list of conditions and the following disclaimer. 
*   2. Redistributions in binary form must reproduce the above copyright notice,
*      this list of conditions and the following disclaimer in the documentation
*      and/or other materials provided with the distribution. 
*   3. The name of the author may not be used to endorse or promote products
*      derived from this software without specific prior written permission. 
* 
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
* EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
* OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
* OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*/

package MICC.chserver;

import java.io.*;
import javax.microedition.io.*;

public final class ServerConnection {
  private InputStream         is;
  private OutputStream        os;
  private SocketConnection    sc;
  private StringBuffer        sb;
  private boolean             messageDone;
  private boolean             onNextCheckPrompt;
  private static final String PROMT_SEARCH = "\nfics% ";
  private int                 state = STATE_CLOSED;
  private boolean             guest;
  
  // States
  private static final int STATE_CLOSED = 0;
  private static final int STATE_OPEN = 1;
  
  // Open request return status
  public static final int OPEN_OK             = 1;
  public static final int OPEN_CONNECT_FAILED = 2;
  public static final int OPEN_LOGIN_FAILED   = 3;
  public static final int OPEN_ABORTED        = 4;
  
  public ServerConnection() {
//#mdebug
    System.out.println(toString() + " constructed");
//#enddebug
    
    sb = new StringBuffer();
    messageDone = false;
    onNextCheckPrompt = false;
    state = STATE_CLOSED;
  }
  
  public synchronized int open(String name, String port, String userName, String password) {
    final String  findLogin[] = {"login: "};
    final String  findPassword[] = {"password: "};
    final String  findUserStatus[] = {"is a registered name", "is not a registered name", "login: "};
    final String  findLoginStatus[] = {PROMT_SEARCH, "**** Invalid password! ****", "login: "};
    final String  startingSession[] = {"**** Starting FICS session as"};
    
    StringBuffer  matchedLineBuf = new StringBuffer();
    int     found;
    boolean loginOk          = false;
    boolean guest            = false;
    
//#mdebug
    System.out.println("Opening server connection:");
    System.out.println("  Server:   " + name);
    System.out.println("  Port:     " + port);
    System.out.println("  User:     " + userName);
    System.out.println("  Password: " + password);
//#enddebug
    
    if (state != STATE_CLOSED) return OPEN_CONNECT_FAILED;
    
    try {
      sc = (SocketConnection)Connector.open("socket://" + name + ":" + port);
      is = sc.openInputStream();
      os = sc.openOutputStream();
      
      skipUpTo(findLogin, matchedLineBuf);
      sendLine(userName);
      
      if (userName.toLowerCase().equals("guest")) {
        guest = true;
      }
      else {
        found = skipUpTo(findUserStatus, matchedLineBuf);
        
        switch (found) {
          case 0:
            // "is a registered name"
            // Now send password.
            skipUpTo(findPassword, matchedLineBuf);
            sendLine(password);
            found = skipUpTo(findLoginStatus, matchedLineBuf);
            loginOk = (found == 0);
            break;
            
          case 1:
            // "is not a registered name"
//#mdebug
            System.out.println("MatchedLine: " + matchedLineBuf.toString());
//#enddebug
            guest = true;
            break;
            
          case 2:
          default:
            loginOk = false;
            break;
        }
      }
      
      if (guest) {
        String matchedLine;
        // FICS expects a newline confirmation to enter as guest.
        sendLine("");
        // Now find the actual user name given by the server.
        found = skipUpTo(startingSession, matchedLineBuf);
        matchedLine = matchedLineBuf.toString().substring(startingSession[0].length());
        loginOk = (found == 0);
      }
      
      if (loginOk) state = STATE_OPEN;
      else close();
      
      return loginOk ? OPEN_OK : OPEN_LOGIN_FAILED;
    }
    catch (IOException ioe) {
//#mdebug
      System.out.println(ioe);
//#enddebug
      return OPEN_CONNECT_FAILED;
    }
  }
  
  public boolean isGuest() {
    return guest;
  }
  
  // Writes a line of text to the server.
  public synchronized void sendLine(String line) {
    byte theBytes[] = (line + "\r\n").getBytes();
    
    try {
      os.write(theBytes);
      os.flush();
    } catch (IOException ioe) {
//#mdebug
      System.out.println(ioe);
//#enddebug
    }
  }
  
  public String readMessage() throws IOException {
    String  s = null;
    boolean done = false;
    int     available;
    int     n;
    
    if (state != STATE_OPEN) return null;
    
    available = is.available();
    
    for (n = 1; n <= available && !messageDone; ++n)
    {
      int c = is.read();
      
      if (onNextCheckPrompt) {
        sb.append((char)c);
        if (c == ' ') messageDone = sb.toString().endsWith(PROMT_SEARCH);
        onNextCheckPrompt = false;
      } else {
        switch (c) {
          case '\r':
            // Ignore
            break;
            
          case -1:
            //TODO: Handle end of stream
            messageDone = true;
            break;
            
          case '%':
            onNextCheckPrompt = true;
            sb.append((char)c);
            break;
            
          default:
            // Add all other chars to line
            sb.append((char)c);
            break;
        }
      }
    }
    
    if (messageDone) {
      s = sb.toString();
      messageDone = false;
      sb.setLength(0);

      // Skip leading '\n' and the trailing prompt.
      {
        int i = 0;
        while (s.charAt(i) == '\n') ++i;
        s = s.substring(i, s.length() - PROMT_SEARCH.length());
      }
    }
//#mdebug
    //if (s != null) System.out.println("SrvMsg: " + s);
//#enddebug
    return s;
  }
  
  // Closes the server connection resources.
  public synchronized void close() {
    try { os.close(); } catch (IOException ioe) { }
    try { is.close(); } catch (IOException ioe) { }
    try { sc.close(); } catch (IOException ioe) { }
    os = null;
    is = null;
    sc = null;
    state = STATE_CLOSED;
  }
  
  private int skipUpTo(String findThis[], StringBuffer matchedLineBuf) throws IOException {
    boolean      found = false;
    int          foundIndex = -1;
    String       total = null;
    
    matchedLineBuf.setLength(0);
    
    while (!found) {
      int    i;
      char   c;
      
      c = (char)is.read();
      
      switch (c) {
        case '\r':
          // Ignore
          break;
          
        case '\n':
          matchedLineBuf.setLength(0);
          // Fall through
        default:
          matchedLineBuf.append(c);
          total = sb.toString();
          
          for (i = 0; !found && (i < findThis.length); i++) {
            if (total.endsWith(findThis[i])) {
              foundIndex = i;
              found = true;
            }
          }
          break;
       }
    }
    
    return foundIndex;
  }
  
  class AbortConnectException extends Exception {
  }
  
}

